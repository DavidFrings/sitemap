import { addTemplate, createResolver, loadNuxtModuleInstance, normalizeSemanticVersion, useNuxt } from '@nuxt/kit'
import { relative } from 'pathe'
import { satisfies } from 'semver'
import type { NuxtModule } from 'nuxt/schema'
import type { MaybePromise } from './runtime/types'

export function extendTypes(module: string, template: (options: { typesPath: string }) => MaybePromise<string>) {
  const nuxt = useNuxt()
  const { resolve } = createResolver(import.meta.url)
  // paths.d.ts
  addTemplate({
    filename: `module/${module}.d.ts`,
    getContents: async () => {
      let typesPath = relative(resolve(nuxt!.options.rootDir, nuxt!.options.buildDir, 'module'), resolve('runtime'))
      if (typesPath.includes('dist'))
        typesPath = `${typesPath}/types`
      else
        typesPath = `${typesPath}/types`

      const s = await template({ typesPath })
      return `// Generated by ${module}
${s}
export {}
`
    },
  })

  nuxt.hooks.hook('prepare:types', ({ references }) => {
    references.push({ path: resolve(nuxt.options.buildDir, `module/${module}.d.ts`) })
  })
}

// @todo remove after 3.6.2
export async function getNuxtModuleVersion(module: string | NuxtModule, nuxt = useNuxt()) {
  const moduleMeta = (typeof module === 'string' ? { name: module } : await module.getMeta?.()) || {}
  if (moduleMeta.version)
    return moduleMeta.version

  if (!moduleMeta.name)
    return false

  const version = nuxt.options._installedModules.filter(m => m.meta.name === moduleMeta.name).map(m => m.meta.version)?.[0]
  if (version)
    return version

  if (nuxt.options.modules.includes(moduleMeta.name)) {
    const { buildTimeModuleMeta } = await loadNuxtModuleInstance(moduleMeta.name, nuxt)
    return buildTimeModuleMeta.version || false
  }
  return false
}

export async function hasNuxtModuleCompatibility(module: string | NuxtModule, semverVersion: string, nuxt = useNuxt()) {
  const version = await getNuxtModuleVersion(module, nuxt)
  if (!version)
    return false

  return satisfies(normalizeSemanticVersion(version), semverVersion, {
    includePrerelease: true,
  })
}
