import { writeFile } from 'node:fs/promises'
import { Readable } from 'node:stream'
import { addTemplate, createResolver, defineNuxtModule } from '@nuxt/kit'
import { defu } from 'defu'
import type { SitemapStreamOptions } from 'sitemap'
import { SitemapStream, streamToPromise } from 'sitemap'
import { createRouter as createRadixRouter, toRouteMatcher } from 'radix3'
import type { Nitro } from 'nitropack'
import type { CreateFilterOptions } from './urlFilter'
import { createFilter } from './urlFilter'

export interface ModuleOptions extends CreateFilterOptions, SitemapStreamOptions {
}

export interface ModuleHooks {
  'sitemap:generate': (ctx: { urls: string[]; sitemap: SitemapStream }) => Promise<void>
}

export default defineNuxtModule<ModuleOptions>({
  meta: {
    name: 'nuxt-simple-sitemap',
    version: '3.0.0',
    compatibility: {
      nuxt: '^3.0.0',
      bridge: false,
    },
    configKey: 'sitemap',
  },
  defaults(nuxt) {
    return {
      include: ['/**'],
      hostname: nuxt.options.runtimeConfig.host,
    }
  },
  setup(config, nuxt) {
    // make sure a hostname is set so we can generate the sitemap
    config.hostname = config.hostname || 'https://example.com'
    const { resolve } = createResolver(import.meta.url)

    // paths.d.ts
    addTemplate({
      filename: 'sitemap.d.ts',
      getContents: () => {
        return `// Generated by nuxt-simple-sitemap
declare module 'nitropack' {
  interface NitroRouteRules {
    indexable?: boolean
    sitemap?: {
      priority?: number
      changefreq?: 'always' | 'hourly' | 'daily' | 'weekly' | 'monthly' | 'yearly' | 'never'
    }
  }
}
`
      },
    })

    nuxt.hooks.hook('prepare:types', ({ references }) => {
      references.push({ path: resolve(nuxt.options.buildDir, 'nuxt-seo-kit.d.ts') })
    })

    if (nuxt.options.dev)
      return

    nuxt.hooks.hook('nitro:init', async (nitro: Nitro) => {
      const sitemapRoutes: string[] = []

      const outputSitemap = async () => {
        const _routeRulesMatcher = toRouteMatcher(
          createRadixRouter({ routes: nitro.options.routeRules }),
        )
        const urlFilter = createFilter(config)
        const stream = new SitemapStream(config)

        const urls = sitemapRoutes
          // filter for config
          .filter(urlFilter)
          // fix order
          .sort()
          // check route rules
          .map((path) => {
            const routeRules = defu({}, ..._routeRulesMatcher.matchAll(path).reverse())
            // @ts-expect-error untyped
            if (routeRules.indexable === false)
              return false

            // @ts-expect-error untyped
            return { url: path, ...(routeRules.sitemap || {}) }
          }).filter(Boolean)

        const sitemapContext = { stream, urls }
        await nuxt.hooks.hook('sitemap:generate', sitemapContext)
        // Return a promise that resolves with your XML string
        const sitemapXml = await streamToPromise(Readable.from(sitemapContext.urls).pipe(sitemapContext.stream))
          .then(data => data.toString())

        await writeFile(resolve(nitro.options.output.publicDir, 'sitemap.xml'), sitemapXml)
      }

      nitro.hooks.hook('prerender:route', async ({ route }) => {
        // check if the route path is not for a file
        if (!route.includes('.'))
          sitemapRoutes.push(route)
      })
      //
      nitro.hooks.hook('rollup:before', async () => {
        await outputSitemap()
      })

      nitro.hooks.hook('close', async () => {
        await outputSitemap()
      })
    })
  },
})
