import { writeFile } from 'node:fs/promises'
import { Readable } from 'node:stream'
import { addServerHandler, addTemplate, createResolver, defineNuxtModule, useLogger } from '@nuxt/kit'
import { defu } from 'defu'
import type { SitemapStreamOptions } from 'sitemap'
import { SitemapStream, streamToPromise } from 'sitemap'
import { createRouter as createRadixRouter, toRouteMatcher } from 'radix3'
import chalk from 'chalk'
import { withTrailingSlash, withoutTrailingSlash } from 'ufo'
import type { CreateFilterOptions } from './urlFilter'
import { createFilter } from './urlFilter'

export interface ModuleOptions extends CreateFilterOptions, SitemapStreamOptions {
  /**
   * Whether the sitemap.xml should be generated.
   *
   * @default true
   */
  enabled: boolean
  /**
   * Should the URLs be inserted with a trailing slash.
   *
   * @default false
   */
  trailingSlash: boolean
}

export interface ModuleHooks {
  'sitemap:generate': (ctx: { urls: string[]; sitemap: SitemapStream }) => Promise<void>
}

export default defineNuxtModule<ModuleOptions>({
  meta: {
    name: 'nuxt-simple-sitemap',
    compatibility: {
      nuxt: '^3.0.0',
      bridge: false,
    },
    configKey: 'sitemap',
  },
  defaults(nuxt) {
    return {
      include: ['/**'],
      hostname: nuxt.options.runtimeConfig.public?.siteUrl,
      trailingSlash: nuxt.options.runtimeConfig.public.trailingSlash,
      enabled: true,
    }
  },
  setup(config, nuxt) {
    const { resolve } = createResolver(import.meta.url)

    // paths.d.ts
    addTemplate({
      filename: 'nuxt-simple-sitemap.d.ts',
      getContents: () => {
        return `// Generated by nuxt-simple-sitemap
interface NuxtSimpleSitemapNitroRules {
  index?: boolean
  sitemap?: {
    priority?: number
    changefreq?: 'always' | 'hourly' | 'daily' | 'weekly' | 'monthly' | 'yearly' | 'never'
  }
}
declare module 'nitropack' {
  interface NitroRouteRules extends NuxtSimpleSitemapNitroRules {}
  interface NitroRouteConfig extends NuxtSimpleSitemapNitroRules {}
}
export {}
`
      },
    })

    nuxt.hooks.hook('prepare:types', ({ references }) => {
      references.push({ path: resolve(nuxt.options.buildDir, 'nuxt-simple-sitemap.d.ts') })
    })

    // @ts-expect-error untyped
    const fixSlashes = (url: string) => nuxt.options.sitemap?.trailingSlash ? withTrailingSlash(url) : withoutTrailingSlash(url)

    if (nuxt.options.dev) {
      // give a warning when accessing sitemap in dev mode
      addServerHandler({
        route: '/sitemap.xml',
        handler: resolve('./runtime/dev-sitemap'),
      })
      return
    }
    nuxt.hooks.hook('nitro:init', async (nitro) => {
      // tell the user if the sitemap isn't being generated
      const logger = useLogger('nuxt-simple-sitemap')
      if (!config.hostname) {
        logger.warn('Please set a `hostname` on the `sitemap` config to use `nuxt-simple-sitemap`.')
        return
      }
      if (!config.enabled) {
        logger.warn('Sitemap generation is disabled. Set `sitemap.enabled` to `true` to enable it.')
        return
      }

      const sitemapRoutes = new Set<string>()

      const outputSitemap = async () => {
        if (sitemapRoutes.size === 0)
          return

        const start = Date.now()
        const _routeRulesMatcher = toRouteMatcher(
          createRadixRouter({ routes: nitro.options.routeRules }),
        )
        const urlFilter = createFilter(config)
        const stream = new SitemapStream(config)

        const urls = [...sitemapRoutes]
          // filter for config
          .filter(urlFilter)
          // fix order
          .sort()
          // check route rules
          .map((route) => {
            // route matcher assumes all routes have no trailing slash
            const routeRules = defu({}, ..._routeRulesMatcher.matchAll(withoutTrailingSlash(route)).reverse())
            // @ts-expect-error untyped
            if (routeRules.index === false)
              return false

            // @ts-expect-error untyped
            return { url: route, ...(routeRules.sitemap || {}) }
          })
          .filter(Boolean)

        const sitemapContext = { stream, urls }
        // @ts-expect-error untyped
        await nuxt.hooks.callHook('sitemap:generate', sitemapContext)
        // Return a promise that resolves with your XML string
        const sitemapXml = await streamToPromise(Readable.from(sitemapContext.urls).pipe(sitemapContext.stream))
          .then(data => data.toString())

        await writeFile(resolve(nitro.options.output.publicDir, 'sitemap.xml'), sitemapXml)
        const generateTimeMS = Date.now() - start
        nitro.logger.log(chalk.gray(
          `  └─ /sitemap.xml (${generateTimeMS}ms)`,
        ))
        sitemapRoutes.clear()
      }

      nitro.hooks.hook('prerender:route', async ({ route }) => {
        // check if the route path is not for a file
        if (!route.includes('.'))
          // ensure we add routes with consistent slashes
          sitemapRoutes.add(fixSlashes(route))
      })

      // SSR mode
      nitro.hooks.hook('rollup:before', async () => {
        await outputSitemap()
      })

      // SSG mode
      nitro.hooks.hook('close', async () => {
        await outputSitemap()
      })
    })
  },
})
